# Generated by Django 5.2.6 on 2025-09-29 11:31

from django.db import migrations
from django.contrib.auth.hashers import make_password
import secrets
import string


def populate_organization_credentials(apps, schema_editor):
    """
    Generate organization-scoped credentials for existing memberships
    """
    OrganizationMembership = apps.get_model('core', 'OrganizationMembership')
    User = apps.get_model('core', 'User')
    
    for membership in OrganizationMembership.objects.all():
        # Generate username based on user email
        if membership.user.email:
            email_local = membership.user.email.split('@')[0]
            # Remove special characters and make it username-friendly
            base_username = ''.join(c for c in email_local if c.isalnum() or c in '._-')[:30]
        else:
            base_username = f"user{membership.user.id}"
        
        # Ensure username is unique within the organization
        username = base_username
        counter = 1
        while OrganizationMembership.objects.filter(
            organization=membership.organization,
            credential_username=username
        ).exists():
            username = f"{base_username}{counter}"
            counter += 1
        
        # Generate a secure temporary password
        temp_password = ''.join(secrets.choice(
            string.ascii_letters + string.digits + '!@#$%^&*'
        ) for _ in range(12))
        
        # Update the membership with credentials
        membership.credential_username = username
        membership.credential_password_hash = make_password(temp_password)
        membership.requires_password_change = True
        membership.save()
        
        print(f"Generated credentials for {membership.user.email} in {membership.organization.name}: {username}")


def reverse_populate_credentials(apps, schema_editor):
    """
    Remove organization credentials (rollback)
    """
    OrganizationMembership = apps.get_model('core', 'OrganizationMembership')
    
    OrganizationMembership.objects.update(
        credential_username=None,
        credential_password_hash=None,
        requires_password_change=True
    )


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0025_add_org_scoped_credentials'),
    ]

    operations = [
        migrations.RunPython(
            populate_organization_credentials,
            reverse_populate_credentials
        ),
    ]
