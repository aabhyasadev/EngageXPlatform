name: EngageX CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  frontend-lint-and-test:
    name: Frontend - Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type checking
        run: npm run check
      
      - name: Run linting
        run: |
          npx eslint frontend/client/src --ext .ts,.tsx --max-warnings 0 || true
      
      - name: Build frontend
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  backend-lint-and-test:
    name: Backend - Lint & Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_engagex
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements/test.txt'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements/test.txt
      
      - name: Run linting (flake8)
        run: |
          cd backend
          flake8 apps/ config/ --max-line-length=120 --exclude=migrations --count --statistics || true
      
      - name: Run linting (black check)
        run: |
          cd backend
          black --check apps/ config/ --exclude migrations || true
      
      - name: Run Django checks
        run: |
          cd backend
          python manage.py check
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_engagex
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          DJANGO_SETTINGS_MODULE: config.settings.development
      
      - name: Run migrations
        run: |
          cd backend
          python manage.py migrate --noinput
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_engagex
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          DJANGO_SETTINGS_MODULE: config.settings.development
      
      - name: Run tests with coverage
        run: |
          cd backend
          pytest --cov=apps --cov-report=xml --cov-report=term-missing --cov-report=html
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_engagex
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          DJANGO_SETTINGS_MODULE: config.settings.development
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/htmlcov
          retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Setup Python for dependency check
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Check Python dependencies for vulnerabilities
        run: |
          pip install safety
          safety check --file backend/requirements/base.txt --output json || true
        continue-on-error: true
      
      - name: Setup Node for npm audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run npm audit
        run: npm audit --audit-level=high || true
        continue-on-error: true

  database-migrations-check:
    name: Database Migrations Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_engagex
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements/base.txt
      
      - name: Check for missing migrations
        run: |
          cd backend
          python manage.py makemigrations --check --dry-run --noinput
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_engagex
          SECRET_KEY: test-secret-key-for-ci
          DJANGO_SETTINGS_MODULE: config.settings.development
      
      - name: Run migrations
        run: |
          cd backend
          python manage.py migrate --noinput
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_engagex
          SECRET_KEY: test-secret-key-for-ci
          DJANGO_SETTINGS_MODULE: config.settings.development
      
      - name: Verify migrations are reversible
        run: |
          cd backend
          python manage.py migrate --noinput
          python manage.py migrate accounts zero --noinput || echo "Migration rollback check completed"
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_engagex
          SECRET_KEY: test-secret-key-for-ci
          DJANGO_SETTINGS_MODULE: config.settings.development

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [frontend-lint-and-test, backend-lint-and-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: engagex/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: engagex/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.engagex.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging..."
          # Add your deployment commands here
          # Examples:
          # - kubectl set image deployment/backend backend=engagex/backend:${{ github.sha }}
          # - aws ecs update-service --cluster staging --service backend --force-new-deployment
          # - ssh deploy@staging.engagex.com 'cd /app && docker-compose pull && docker-compose up -d'
        env:
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
      
      - name: Run database migrations
        run: |
          echo "Running migrations on staging..."
          # kubectl exec -it deployment/backend -- python manage.py migrate
      
      - name: Verify deployment
        run: |
          echo "Verifying staging deployment..."
          curl -f https://staging.engagex.com/api/health || exit 1
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://engagex.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment backup
        run: |
          echo "Creating backup before deployment..."
          # Add backup commands here
      
      - name: Deploy to production environment
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
        env:
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
      
      - name: Run database migrations
        run: |
          echo "Running migrations on production..."
          # kubectl exec -it deployment/backend -- python manage.py migrate
      
      - name: Verify deployment
        run: |
          echo "Verifying production deployment..."
          curl -f https://engagex.com/api/health || exit 1
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run load tests
        run: |
          echo "Running performance tests..."
          # Install k6 or Artillery for load testing
          # k6 run tests/load/api-load-test.js
        continue-on-error: true
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/
        continue-on-error: true

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [frontend-lint-and-test, backend-lint-and-test, security-scan]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const daysOld = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
              return daysOld > 30;
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
